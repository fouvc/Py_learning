"""模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。模块可以被别的程序引入，以使用该模块中的函数等功能"""

#使用标准库模块的例子
#sys模块提供了访问与python解释器交互的变量和函数的功能
import sys
print('命令行参数如下：')
for i in sys.argv:
    print(i)
print('\n\nPython路径为：', sys.path,'\n')#sys.path变量保存了Python的搜索路径，即模块的查找路径
print('--------------------------------------------------')

#使用自定义模块的例子
#自定义模块文件名为module_example.py，内容如下：
"""
当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。
搜索路径时一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support，需要把命令放在脚本的顶端"""
import module_example
module_example.print_func("Pyhton")
print('--------------------------------------------------')

"""
from A import B
Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中
这个声明不会把整个模块导入到当前的命名空间中，它只会将你需要的函数引入进来-->从模块A中导入函数B到当前命名空间中"""

"""
from...import *
把一个模块的所有内容全都导入到当前的命名空间也是可行的
这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用"""

"""
import A 和 from A import B的区别
前者只是导入了模块A，而后者导入了模块A中的函数B到当前命名空间中。
如果要使用B，在前者情况下只能A.B()或a=A.B()，而在后者情况下可以直接使用B()或a=B()。"""

"""
if __name__=='__main__:
一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，
模块中的某一程序块不执行，我们可以用__name__属性来使该程序块仅在该模块自身运行时执行
说明： 每个模块都有一个__name__属性，当其值是'__main__'时，表明该模块自身在运行，否则是被引入。
说明：__name__ 与 __main__ 底下是双下划线，__是这样去掉中间的那个空格"""

"""
包就是模块的集合，为了方便导入一些模块，可以把他们放入一个包里，想使用时直接导入包即可。
1.导入模块的方式：
    import module_name
    from module_name import function_name
2.导入包中的模块的方式：
    import package_name.module_name
    from package_name import module_name"""
